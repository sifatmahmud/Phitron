CREATE DATABASE ONLINE_COURSE_MANAGEMENT;

USE ONLINE_COURSE_MANAGEMENT;

CREATE TABLE Instructor (	
    InstructorID INT AUTO_INCREMENT PRIMARY KEY,	
    Name VARCHAR(255) NOT NULL,	
    Email VARCHAR(255) NOT NULL UNIQUE,	
    Phone VARCHAR(15),	
    Department VARCHAR(50)	
);

CREATE TABLE Course (	
    CourseID INT AUTO_INCREMENT PRIMARY KEY,	
    Title VARCHAR(255) NOT NULL,	
    Credits INT NOT NULL,	
    InstructorID INT,	
    FOREIGN KEY (InstructorID) REFERENCES Instructor(InstructorID)	
);


CREATE TABLE Student (	
    StudentID INT AUTO_INCREMENT PRIMARY KEY,	
    Name VARCHAR(255) NOT NULL,	
    Email VARCHAR(255) NOT NULL UNIQUE,	
    Phone VARCHAR(15)	
);


CREATE TABLE Enrollment (	
    EnrollmentID INT AUTO_INCREMENT PRIMARY KEY,	
    StudentID INT,	
    CourseID INT,	
    EnrollmentDate DATE NOT NULL,	
    FOREIGN KEY (StudentID) REFERENCES Student(StudentID),	
    FOREIGN KEY (CourseID) REFERENCES Course(CourseID)	
);




INSERT INTO INSTRUCTOR(NAME,EMAIL,PHONE,DEPARTMENT)
VALUES('JILANI','Jelani101@gmail.com','01841585244','Philosoply');


INSERT INTO COURSE(TITLE,CREDITS,INSTRUCTORID)
VALUES('CHEMISTRY', '1400', 5);

INSERT INTO STUDENT(NAME,EMAIL,PHONE)
VALUES('RABEYA KHATUN','RABEYA551@GMAIL.COM','01854487589');

INSERT INTO ENROLLMENT(STUDENTID, COURSEID,ENROLLMENTDATE)
VALUES(3,1,CURRENT_DATE());

--------------------------

(
SELECT COURSEID
FROM COURSE
WHERE CREDITS = (SELECT MAX(CREDITS)
FROM COURSE)
);

INSERT INTO ENROLLMENT(STUDENTID,COURSEID,ENROLLMENTDATE)
VALUES(5,(
SELECT COURSEID
FROM COURSE
WHERE CREDITS = (SELECT MAX(CREDITS)
FROM COURSE)
),current_date());

---------------------------------

UPDATE COURSE
SET INSTRUCTORID = 3
WHERE COURSEID = 3;

-----------------------------

SELECT NAME
FROM INSTRUCTOR
WHERE INSTRUCTORID = (SELECT INSTRUCTORID
FROM COURSE
WHERE CREDITS = 
(SELECT MAX(CREDITS)
FROM COURSE));

-----------------------

SELECT S.STUDENTID,S.NAME,S.EMAIL,S.PHONE
FROM STUDENT S
JOIN ENROLLMENT E ON S.STUDENTID = E.STUDENTID
GROUP BY S.STUDENTID,S.NAME,S.EMAIL,S.PHONE
HAVING COUNT(E.COURSEID)>2;

-----------------------
SELECT MAX(SALARY)
FROM INSTRUCTORS
WHERE SALARY < (SELECT MAX(SALARY)
FROM INSTRUCTORS);
------------------

CREATE TABLE Instructor (	
    InstructorID INT AUTO_INCREMENT PRIMARY KEY,	
    Name VARCHAR(255) NOT NULL,	
    Email VARCHAR(255) NOT NULL UNIQUE,	
    Phone VARCHAR(15),	
    Department VARCHAR(50)	
);

CREATE TABLE Course (	
    CourseID INT AUTO_INCREMENT PRIMARY KEY,	
    Title VARCHAR(255) NOT NULL,	
    Credits INT NOT NULL,	
    InstructorID INT,	
    FOREIGN KEY (InstructorID) REFERENCES Instructor(InstructorID) ON DELETE CASCADE
);

















